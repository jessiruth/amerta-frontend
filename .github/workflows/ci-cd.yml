name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - development
      - ci-cd
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - staging
      - development
      - ci-cd

jobs:
  build:
    name: Build React.js App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: package-lock.json
      
      - name: Install Dependencies
        run: npm install
      
      - name: Build Application
        run: npm run build
      
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-app
          path: build/
  
  test:
    name: Run Frontend Tests with Coverage
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Run Frontend Tests with Coverage
        run: npm run test -- --coverage --watchAll=false --passWithNoTests
      
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
  
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Run SonarQube Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        continue-on-error: true

  deploy_staging:
    name: Deploy to Vercel Staging
    runs-on: ubuntu-latest
    needs: [test, sonarqube-analysis]

    if: (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')) && (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/development' || github.ref == 'refs/heads/ci-cd')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install -g vercel
      
      - name: Link to Vercel project
        run: vercel link --project amerta-staging --yes --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Staging)
        run: |
          vercel pull --yes --environment=preview --token ${{ secrets.VERCEL_TOKEN }}
          vercel build --token ${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN }}

  deploy_production:
    name: Deploy to Vercel Production
    runs-on: ubuntu-latest
    needs: [test, sonarqube-analysis]

    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Link to Vercel project
        run: vercel link --project amerta --yes --token ${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel (Production)
        run: |
          vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token ${{ secrets.VERCEL_TOKEN }}